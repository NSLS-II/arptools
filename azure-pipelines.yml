trigger:
  branches:
    include:
    - main
    - releases/*
  tags:
    include:
    - v*

variables:
  System.Debug: true

stages:
- stage: Build

  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      matrix:
        centos8:
          containerImage: stuwilkins/arptools-build-centos8:latest
          pkg_type: redhat
          rpmrelease: centos8
        centos7:
          containerImage: stuwilkins/arptools-build-centos7:latest
          pkg_type: redhat
          rpmrelease: centos7

    container:
      image: $[ variables['containerImage'] ]

    steps:
    - script: |
        set -e
        mkdir build
        cd build
        cmake ..
      displayName: Run Configure

    - script: |
        set -e
        cd build
        make
      displayName: Build

    - script: |
        GITDESC=$(git describe --abbrev=0)
        VERSION=$(git describe --abbrev=0 | sed -En 's/v([0-9]+\.)([0-9]+\.)?([0-9]+)-.*/\1\2\3/p')
        echo "##vso[task.setvariable variable=gitdesc]$GITDESC"
        echo "##vso[task.setvariable variable=gitversion]$VERSION"
        echo "##[debug] GITDESC = $GITDESC"
        echo "##[debug] VERSION = $VERSION"
      displayName: Set Git Describe to Variable

#    - script: |
#        set -e
#        mkdir -p build
#        gbp buildpackage \
#          --git-ignore-new \
#          --git-ignore-branch \
#          -uc -us \
#          --git-export-dir=build \
#          --git-tarball-dir=build
#        old_debfile=$(ls -1 build/xsecurelock-nsls2_*.deb | head -1)
#        new_debfile=$(echo ${old_debfile} | sed "s/\.deb/-$(debrelease).deb/")
#        mv "${old_debfile}" "${new_debfile}"
#        echo "##vso[task.setvariable variable=releasefile]${new_debfile}"
#        echo "##[debug] old_debfile = ${old_debfile}"
#        echo "##[debug] new_debfile = ${new_debfile}"
#        echo "##[debug] gitdesc = $(gitdesc)"
#      displayName: 'Build Debian Package'
#      condition: and(succeeded(), eq(variables.pkg_type, 'debian'))
#
#    - task: CopyFiles@2
#      inputs:
#        targetFolder: '$(Build.ArtifactStagingDirectory)'
#        contents: 'build/xsecurelock-nsls2_*.deb'
#        flattenFolders: true
#      condition: and(succeeded(), eq(variables.pkg_type, 'debian'))
#
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathToPublish: '$(Build.ArtifactStagingDirectory)'
#        artifactName: packages
#      displayName: Publish Debian Packages
#      condition: and(succeeded(), eq(variables.pkg_type, 'debian'))
#
    - script: |
        set -e
        RPMDIR="`pwd`/rpmbuild"
        echo $RPMDIR
        SOURCES=${RPMDIR}/SOURCES
        mkdir -p ${SOURCES}
        git archive --format=tar \
          --prefix=xsecurelock-$(gitversion)-nsls2/ \
          --output=${SOURCES}/xsecurelock-v$(gitversion)-nsls2.tar.gz \
          HEAD
        #spectool -g -R xautolock.spec
        #spectool -g -R feh.spec
        cp xautolock.patch ${SOURCES}
        rpmbuild -bb --define "_topdir ${RPMDIR}" --define "version $(gitversion)" xsecurelock-nsls2.spec
        rpmbuild -bb --undefine="_disable_source_fetch" --define "_topdir ${RPMDIR}" xautolock.spec
        rpmbuild -bb --undefine="_disable_source_fetch" --define "_topdir ${RPMDIR}" feh.spec
        echo "##[debug] gitdesc = $(gitdesc)"
      displayName: 'Build rpm Package'
      condition: and(succeeded(), eq(variables.pkg_type, 'redhat'))
#
#    - task: CopyFiles@2
#      inputs:
#        targetFolder: '$(Build.ArtifactStagingDirectory)'
#        contents: rpmbuild/RPMS/x86_64/*
#        flattenFolders: true
#      condition: and(succeeded(), eq(variables.pkg_type, 'redhat'))
#
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathToPublish: '$(Build.ArtifactStagingDirectory)'
#        artifactName: packages
#      displayName: Publish RedHat Packages
#      condition: and(succeeded(), eq(variables.pkg_type, 'redhat'))
#
#  - job: Publish
#    dependsOn: Build
#    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
#    steps:
#      - script: |
#          GITDESC=$(git describe --abbrev=0)
#          echo "##vso[task.setvariable variable=gitdesc]$GITDESC"
#          echo "##[debug] GITDESC = $GITDESC"
#        displayName: Set Git Describe to Variable
#      - task: DownloadBuildArtifacts@0
#        inputs:
#          buildType: 'current'
#          downloadType: 'single'
#          artifactName: 'packages'
#          downloadPath: '$(System.ArtifactsDirectory)'
#        displayName: Download Packages
#      - task: GithubRelease@0
#        inputs:
#          gitHubConnection: github.com_stuwilkins
#          repositoryName: NSLS-II/xsecurelock
#          assets: '$(System.ArtifactsDirectory)/**/*'
#          action: edit
#          target: '$(Build.SourceVersion)'
#          tag: $(gitdesc)
#          addChangeLog: false
#          assetUploadMode: replace
#        displayName: 'Attach package to release'
#
